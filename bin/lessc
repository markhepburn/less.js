#!/usr/bin/env js

var file = require('file'),
    os = require('os'),
    system = require('system');

if (typeof __dirname == 'undefined') {
    var __dirname = file.dirname(module.path);
}
require.paths.unshift(file.join(__dirname, '..', 'lib'));

var less = require('less/index');
var args = system.args.slice(1);
var options = {
    compress: false,
    optimization: 1,
    silent: false,
    loop: false,
    loopInterval: 2 // seconds
};

args = args.filter(function (arg) {
    var match;

    if (match = arg.match(/^--?([a-z][0-9a-z-]*)$/i)) { arg = match[1] }
    else { return arg }

    switch (arg) {
        case 'v':
        case 'version':
            system.print("lessc " + less.version.join('.') + " (LESS Compiler) [JavaScript]");
            os.exit(0);
        case 'verbose':
            options.verbose = true;
            break;
        case 's':
        case 'silent':
            options.silent = true;
            break;
        case 'h':
        case 'help':
            system.print("usage: lessc source [destination]");
            os.exit(0);
        case 'x':
        case 'compress':
            options.compress = true;
            break;
        case 'l':
        case 'loop':
            options.loop = true;
            break;
        case 'O0': options.optimization = 0; break;
        case 'O1': options.optimization = 1; break;
        case 'O2': options.optimization = 2; break;
    }
});

var input = args[0];
if (input && input[0] != '/') {
    input = file.join(file.cwd(), input);
}
var output = args[1];
if (output && output[0] != '/') {
    output = file.join(file.cwd(), output);
}

var css, fd, tree;

if (! input) {
    system.print("lessc: no input files");
    os.exit(1);
}

// There's no 'stat', so instead of checking modification time when looping
// we'll just compare input strings:
var oldData = null;

while (true) {
    var data = file.read(input);
    if (data == oldData) {
        os.sleep(options.loopInterval);
        continue;
    }
    oldData = data;
    new(less.Parser)({
        paths: [file.dirname(input)],
        optimization: options.optimization,
        filename: input
    }).parse(data, function (err, tree) {
        if (err) {
            less.writeError(err, options);
            os.exit(1);
        } else {
            try {
                css = tree.toCSS({ compress: options.compress });
                if (output) {
                    file.write(output, css);
                } else {
                    system.print(css);
                }
            } catch (e) {
                less.writeError(e, options);
                os.exit(2);
            }
        }
    });
    if (!options.loop) {
        // explicit exit if we're not looping:
        os.exit(0);
    }
}
