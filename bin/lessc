#!/usr/bin/env node

var file = require('file'),
    system = require('system');

if (typeof __dirname == 'undefined') {
    var __dirname = file.dirname(module.path);
}
require.paths.unshift(file.join(__dirname, '..', 'lib'));

var less = require('less');
var args = process.argv.slice(1);
var options = {
    compress: false,
    optimization: 1,
    silent: false
};

args = args.filter(function (arg) {
    var match;

    if (match = arg.match(/^--?([a-z][0-9a-z-]*)$/i)) { arg = match[1] }
    else { return arg }

    switch (arg) {
        case 'v':
        case 'version':
            system.print("lessc " + less.version.join('.') + " (LESS Compiler) [JavaScript]");
            process.exit(0);
        case 'verbose':
            options.verbose = true;
            break;
        case 's':
        case 'silent':
            options.silent = true;
            break;
        case 'h':
        case 'help':
            system.print("usage: lessc source [destination]");
            process.exit(0);
        case 'x':
        case 'compress':
            options.compress = true;
            break;
        case 'O0': options.optimization = 0; break;
        case 'O1': options.optimization = 1; break;
        case 'O2': options.optimization = 2; break;
    }
});

var input = args[1];
if (input && input[0] != '/') {
    input = file.join(process.cwd(), input);
}
var output = args[2];
if (output && output[0] != '/') {
    output = file.join(process.cwd(), output);
}

var css, fd, tree;

if (! input) {
    system.print("lessc: no input files");
    process.exit(1);
}

// new stuff:
var data = file.read(filename);
new(less.Parser)({
    paths: [file.dirname(input)],
    optimization: options.optimization,
    filename: input
}).parse(data, function (err, tree) {
    if (err) {
        less.writeError(err, options);
        process.exit(1);
    } else {
        try {
            css = tree.toCSS({ compress: options.compress });
            if (output) {
                file.write(output, css);
            } else {
                system.print(css);
            }
        } catch (e) {
            less.writeError(e, options);
            process.exit(2);
        }
    }
});
